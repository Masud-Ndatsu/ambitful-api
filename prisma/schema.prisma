generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String     @id @default(cuid())
  name           String
  email          String     @unique
  password       String
  country        String
  status         String @default("active")
  verified       Boolean    @default(false)
  signupDate     DateTime   @default(now())
  lastActive     DateTime   @default(now())
  interests      String[]
  bio            String?
  skills         String[]
  profilePicture String?
  
  // Enhanced profile for AI personalization
  academicLevel     String?    // "high_school", "undergraduate", "graduate", "postgraduate", "professional"
  fieldOfStudy      String?    // Primary academic/professional field
  careerStage       String?    // "student", "entry_level", "mid_level", "senior_level", "executive"
  goals             String[]   // Short and long term goals
  preferences       Json?      // Communication style, content preferences, etc.
  personalityTraits String[]   // Traits that affect learning/communication style
  learningStyle     String?    // "visual", "auditory", "kinesthetic", "reading_writing"
  aiInteractionPrefs Json?     // Preferences for AI interactions (tone, detail level, etc.)
  timeZone          String?    // For scheduling and time-relevant recommendations
  languages         String[]   // Spoken languages for context
  workExperience    String?    // Years of work experience category
  currentFocus      String[]   // Current areas of focus or learning
  role           String   @default("user")
  linkedinId     String?
  linkedinProfile Json?
  linkedinAccessToken String?
  linkedinTokenExpiresAt DateTime?

  conversations      ChatConversation[]
  tokens             Token[]
  activities         UserActivity[]
  applications       Application[]
  savedOpportunities SavedOpportunity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Opportunity {
  id          String            @id @default(cuid())
  title       String
  type        String
  description String
  deadline    DateTime
  location    String
  amount      String?
  link        String
  category    String
  status      String @default("draft")
  isGenerated Boolean   @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  detail             OpportunityDetail?
  applications       Application[]
  savedOpportunities SavedOpportunity[]
  aiDrafts            AIDraft[]

  @@map("opportunities")
}

model OpportunityDetail {
  id                      String   @id @default(cuid())
  opportunityId           String   @unique
  fullDescription         String
  applicationInstructions String[]
  eligibility             String[]
  benefits                String[]
  views                   Int      @default(0)
  applications            Int      @default(0)
  saves                   Int      @default(0)

  opportunity Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)

  @@map("opportunity_details")
}

model AIDraft {
  id       String        @id @default(cuid())
  title    String
  source   String
  status   String   @default("pending")
  priority String @default("medium")

  // Raw scraped content
  rawContent String? @db.Text
  dateScraped DateTime @default(now())

  // Extracted opportunity fields (direct columns for better querying)
  extractedTitle       String?
  extractedType        String?
  extractedDescription String? @db.Text
  extractedDeadline    DateTime?
  extractedLocation    String?
  extractedAmount      String?
  extractedLink        String?
  extractedCategory    String?

  // Extracted detail fields
  extractedFullDescription        String? @db.Text
  extractedApplicationInstructions String[] // Array of strings
  extractedEligibility            String[] // Array of strings
  extractedBenefits               String[] // Array of strings

  // Additional extracted data (for any extra fields not covered above)
  extractedData Json?

  // Review fields
  feedback   String? @db.Text
  reviewedAt DateTime?
  reviewedBy String?

  // Related opportunity if approved
  opportunityId String?
  opportunity   Opportunity? @relation(fields: [opportunityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([priority])
  @@index([extractedType])
  @@index([extractedDeadline])
  @@index([dateScraped])
  @@map("ai_drafts")
}

model ChatConversation {
  id        String        @id @default(cuid())
  userId    String
  title     String?
  messages  ChatMessage[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_conversations")
}

model ChatMessage {
  id             String        @id @default(cuid())
  conversationId String
  content        String
  sender         String
  timestamp      DateTime      @default(now())
  metadata       Json?

  conversation ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Token {
  id        String    @id @default(cuid())
  token     String    @unique
  type      String
  userId    String
  expiresAt DateTime
  createdAt DateTime  @default(now())
  used      Boolean   @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String
  action      String
  description String
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

model Application {
  id              String            @id @default(cuid())
  userId          String
  opportunityId   String
  status          String @default("pending")
  applicationData Json?
  submittedAt     DateTime          @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  opportunity Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)

  @@unique([userId, opportunityId])
  @@map("applications")
}

model SavedOpportunity {
  id            String   @id @default(cuid())
  userId        String
  opportunityId String
  savedAt       DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  opportunity Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)

  @@unique([userId, opportunityId])
  @@map("saved_opportunities")
}

model Testimonial {
  id          String   @id @default(cuid())
  name        String
  age         Int
  location    String
  opportunity String
  testimonial String   @db.Text
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("testimonials")
}

model CrawlSource {
  id           String            @id @default(cuid())
  name         String
  url          String
  status       String @default("active")
  frequency    String    @default("daily")
  maxResults   Int               @default(50)
  lastCrawl    DateTime?
  lastSuccess  Boolean           @default(false)
  errorMessage String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  crawlLogs    CrawlLog[]

  @@map("crawl_sources")
}

model CrawlLog {
  id           String      @id @default(cuid())
  sourceId     String
  source       CrawlSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  status       String
  itemsFound   Int         @default(0)
  errorMessage String?
  startedAt    DateTime    @default(now())
  completedAt  DateTime?
  createdAt    DateTime    @default(now())

  @@map("crawl_logs")
}

